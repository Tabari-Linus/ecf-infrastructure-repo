AWSTemplateFormatVersion: '2010-09-09'
Description: 'Main infrastructure stack for Photo Upload Application - ECS Fargate with RDS and S3'

# Using Mappings and Conditions for dynamic values without hardcoding
Mappings:
  ProjectConfig:
    Settings:
      ProjectName: 'photo-upload-app'
      Environment: 'production'
      StudentName: 'Tabari Linus'
      ContainerPort: 8080
      DesiredCount: 2
      
  NetworkConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicSubnetA:
      CIDR: '10.0.1.0/24'
    PublicSubnetB:
      CIDR: '10.0.2.0/24'
    PrivateSubnetA:
      CIDR: '10.0.10.0/24'
    PrivateSubnetB:
      CIDR: '10.0.11.0/24'
    DatabaseSubnetA:
      CIDR: '10.0.20.0/24'
    DatabaseSubnetB:
      CIDR: '10.0.21.0/24'
      
  RegionConfig:
    eu-central-1:
      AMI: 'ami-0c55b159cbfafe1f0'  # Placeholder, not used for Fargate
    us-east-1:
      AMI: 'ami-0c55b159cbfafe1f0'

Resources:
  # ==========================================
  # VPC and Networking Resources
  # ==========================================
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [NetworkConfig, VPC, CIDR]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-vpc'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
        - Key: Environment
          Value: !FindInMap [ProjectConfig, Settings, Environment]
        - Key: StudentName
          Value: !FindInMap [ProjectConfig, Settings, StudentName]
        - Key: ManagedBy
          Value: CloudFormation-GitSync
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-igw'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
  # ==========================================
  # Public Subnets for ALB
  # ==========================================
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, PublicSubnetA, CIDR]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-public-subnet-a'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
        - Key: Type
          Value: Public
          
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, PublicSubnetB, CIDR]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-public-subnet-b'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
        - Key: Type
          Value: Public
          
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-public-routes'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
      
  # ==========================================
  # Private Subnets for ECS Tasks
  # ==========================================
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, PrivateSubnetA, CIDR]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-subnet-a'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
        - Key: Type
          Value: Private
          
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, PrivateSubnetB, CIDR]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-subnet-b'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
        - Key: Type
          Value: Private
          
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-routes-a'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-routes-b'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
      
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB
      
  # ==========================================
  # Database Subnets for RDS
  # ==========================================
  
  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, DatabaseSubnetA, CIDR]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-database-subnet-a'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
        - Key: Type
          Value: Database
          
  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, DatabaseSubnetB, CIDR]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-database-subnet-b'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
        - Key: Type
          Value: Database
          
  # ==========================================
  # VPC Endpoints (Required for Private Subnets)
  # ==========================================
  
  # S3 Gateway Endpoint
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB
              
  # ECR API Endpoint
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  # ECR Docker Endpoint
  ECRDockerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  # CloudWatch Logs Endpoint
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  # Secrets Manager Endpoint
  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  # ==========================================
  # Security Groups
  # ==========================================
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 
        - '${ProjectName}-alb-sg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP traffic from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS traffic from internet
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-alb-sg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 
        - '${ProjectName}-ecs-task-sg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      GroupDescription: Security group for ECS Fargate tasks
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-ecs-task-sg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  ECSTaskSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSTaskSecurityGroup
      IpProtocol: tcp
      FromPort: !FindInMap [ProjectConfig, Settings, ContainerPort]
      ToPort: !FindInMap [ProjectConfig, Settings, ContainerPort]
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      Description: Allow traffic from ALB
      
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 
        - '${ProjectName}-database-sg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-database-sg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  DatabaseSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref ECSTaskSecurityGroup
      Description: Allow PostgreSQL traffic from ECS tasks
      
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 
        - '${ProjectName}-vpce-sg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      GroupDescription: Security group for VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ECSTaskSecurityGroup
          Description: Allow HTTPS from ECS tasks
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-vpce-sg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'
      
  VPCCidr:
    Description: VPC CIDR Block
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub '${AWS::StackName}-VPC-CIDR'
      
  PublicSubnetAId:
    Description: Public Subnet A ID
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetA-ID'
      
  PublicSubnetBId:
    Description: Public Subnet B ID
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetB-ID'
      
  PrivateSubnetAId:
    Description: Private Subnet A ID
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetA-ID'
      
  PrivateSubnetBId:
    Description: Private Subnet B ID
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetB-ID'
      
  DatabaseSubnetAId:
    Description: Database Subnet A ID
    Value: !Ref DatabaseSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSubnetA-ID'
      
  DatabaseSubnetBId:
    Description: Database Subnet B ID
    Value: !Ref DatabaseSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSubnetB-ID'
      
  ALBSecurityGroupId:
    Description: ALB Security Group ID
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALB-SG-ID'
      
  ECSTaskSecurityGroupId:
    Description: ECS Task Security Group ID
    Value: !Ref ECSTaskSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ECSTask-SG-ID'
      
  DatabaseSecurityGroupId:
    Description: Database Security Group ID
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-Database-SG-ID'
      
  S3VPCEndpointId:
    Description: S3 VPC Endpoint ID
    Value: !Ref S3GatewayEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-S3-VPCEndpoint-ID'