AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete Photo Upload Application Infrastructure - Single Template for GitSync'

# All configuration embedded - no external parameters or scripts needed
Mappings:
  ProjectConfig:
    Settings:
      ProjectName: 'photo-upload-app'
      Environment: 'production'
      StudentName: 'Tabari Linus'
      ContainerPort: 8080
      DesiredCount: 2
      
  NetworkConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    Subnets:
      PublicA: '10.0.1.0/24'
      PublicB: '10.0.2.0/24'
      PrivateA: '10.0.10.0/24'
      PrivateB: '10.0.11.0/24'
      DatabaseA: '10.0.20.0/24'
      DatabaseB: '10.0.21.0/24'
      
  DatabaseConfig:
    Settings:
      DBName: 'photodb'
      DBUsername: 'photodbadmin'
      Engine: 'postgres'
      EngineVersion: '15.4'
      InstanceClass: 'db.t3.micro'
      AllocatedStorage: 20
      
  ECSConfig:
    Task:
      Cpu: '512'
      Memory: '1024'
      ImageTag: 'latest'
      
  GitHubConfig:
    Settings:
      Organization: 'Tabari-Linus'
      ApplicationRepo: 'photo-upload-app'

Resources:
  # ==========================================
  # NETWORKING RESOURCES
  # ==========================================
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [NetworkConfig, VPC, CIDR]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !sub
            - '${ProjectName}-vpc'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - '${ProjectName}-igw'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
  # Public Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, Subnets, PublicA]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !sub
            - '${ProjectName}-public-subnet-a'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, Subnets, PublicB]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !sub
            - '${ProjectName}-public-subnet-b'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # Private Subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, Subnets, PrivateA]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-subnet-a'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, Subnets, PrivateB]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-subnet-b'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # Database Subnets
  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, Subnets, DatabaseA]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-database-subnet-a'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [NetworkConfig, Subnets, DatabaseB]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-database-subnet-b'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-public-routes'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
      
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-routes-a'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-routes-b'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
      
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB
      
  # ==========================================
  # VPC ENDPOINTS (No NAT Gateway needed)
  # ==========================================
  
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB
        
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  ECRDockerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  # ==========================================
  # SECURITY GROUPS
  # ==========================================
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub
        - '${ProjectName}-alb-sg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          VaValue: !Sub
            - '${ProjectName}-alb-sg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub
        - '${ProjectName}-ecs-task-sg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      GroupDescription: Security group for ECS Fargate tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !FindInMap [ProjectConfig, Settings, ContainerPort]
          ToPort: !FindInMap [ProjectConfig, Settings, ContainerPort]
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub
            - '${ProjectName}-ecs-task-sg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub
        - '${ProjectName}-database-sg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSTaskSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub
            - '${ProjectName}-database-sg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub
        - '${ProjectName}-vpce-sg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      GroupDescription: Security group for VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ECSTaskSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub
            - '${ProjectName}-vpce-sg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # STORAGE RESOURCES (S3 & RDS)
  # ==========================================
  
  # Auto-generate secure password
  DBPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub
        -  '/${ProjectName}/rds/master-password'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Description: Auto-generated RDS master password
      GenerateSecretString:
        SecretStringTemplate: !Sub |
          {
            "username": "${DatabaseConfig.Settings.DBUsername}"
          }
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true
        
  PhotoS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 
        - '${ProjectName}-photos-${AWS::AccountId}-${AWS::Region}'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: STANDARD_IA
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-photos-bucket'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub
        - '${ProjectName}-db-subnet-group'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      DBSubnetGroupDescription: Subnet group for RDS PostgreSQL
      SubnetIds:
        - !Ref DatabaseSubnetA
        - !Ref DatabaseSubnetB
      Tags:
        - Key: Name
          Value: !Sub
            - '${ProjectName}-db-subnet-group'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  PostgreSQLDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub 
        - '${ProjectName}-postgres-db'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      DBName: !FindInMap [DatabaseConfig, Settings, DBName]
      Engine: !FindInMap [DatabaseConfig, Settings, Engine]
      EngineVersion: !FindInMap [DatabaseConfig, Settings, EngineVersion]
      DBInstanceClass: !FindInMap [DatabaseConfig, Settings, InstanceClass]
      AllocatedStorage: !FindInMap [DatabaseConfig, Settings, AllocatedStorage]
      StorageType: gp3
      StorageEncrypted: true
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBPasswordSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBPasswordSecret}:SecretString:password}}'
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      MultiAZ: true
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: !Sub
            - '${ProjectName}-postgres-db'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # ECS RESOURCES
  # ==========================================
  
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !FindInMap [ProjectConfig, Settings, ProjectName]
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Keep last 10 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": { "type": "expire" }
            }]
          }
          
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 
        - '/ecs/${ProjectName}'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      RetentionInDays: 30
      
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub
        - '${ProjectName}-alb'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub
            - '${ProjectName}-alb'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub
        - '${ProjectName}-tg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Port: !FindInMap [ProjectConfig, Settings, ContainerPort]
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
        
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub
        - '${ProjectName}-ecs-cluster'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
          
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: SecretAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref DBPasswordSecret
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'
                
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt PhotoS3Bucket.Arn
                  - !Sub '${PhotoS3Bucket.Arn}/*'
                  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub
        - '${ProjectName}-task'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !FindInMap [ECSConfig, Task, Cpu]
      Memory: !FindInMap [ECSConfig, Task, Memory]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !FindInMap [ProjectConfig, Settings, ProjectName]
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:${ECSConfig.Task.ImageTag}'
          PortMappings:
            - ContainerPort: !FindInMap [ProjectConfig, Settings, ContainerPort]
          Environment:
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - Name: S3_BUCKET_NAME
              Value: !Ref PhotoS3Bucket
            - Name: STUDENT_NAME
              Value: !FindInMap [ProjectConfig, Settings, StudentName]
            - Name: DB_URL
              Value: !Sub 'jdbc:postgresql://${PostgreSQLDatabase.Endpoint.Address}:${PostgreSQLDatabase.Endpoint.Port}/${DatabaseConfig.Settings.DBName}'
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub '${DBPasswordSecret}:username::'
            - Name: DB_PASSWORD
              ValueFrom: !Sub '${DBPasswordSecret}:password::'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
              
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub
        - '${ProjectName}-service'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !FindInMap [ProjectConfig, Settings, DesiredCount]
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !FindInMap [ProjectConfig, Settings, ProjectName]
          ContainerPort: !FindInMap [ProjectConfig, Settings, ContainerPort]
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
          
  # ==========================================
  # CI/CD RESOURCES
  # ==========================================
  
  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: 'https://token.actions.githubusercontent.com'
      ClientIdList:
        - 'sts.amazonaws.com'
      ThumbprintList:
        - '6938fd4d98bab03faadb97b34396831e3780aea1'
        - '1c58a3a8518e8759bf075b76b750d4f2df264fcd'
        
  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - '${ProjectName}-github-actions-role'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt GitHubOIDCProvider.Arn
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': 'sts.amazonaws.com'
              StringLike:
                'token.actions.githubusercontent.com:sub': !Sub 'repo:${GitHubConfig.Settings.Organization}/${GitHubConfig.Settings.ApplicationRepo}:*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
        
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - '${ProjectName}-artifacts-${AWS::AccountId}-${AWS::Region}'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
            
  ECRPushEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub
        - '${ProjectName}-ecr-push-rule'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Description: 'Trigger CodePipeline on ECR push'
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - ECR Image Action
        detail:
          action-type:
            - PUSH
          repository-name:
            - !FindInMap [ProjectConfig, Settings, ProjectName]
          image-tag:
            - latest
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:pipeline/${CodePipeline}'
          Id: CodePipelineTarget
          RoleArn: !GetAtt EventBridgeRole.Arn
          
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StartPipeline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:pipeline/${CodePipeline}'
                
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub
        - '${ProjectName}-codedeploy-app'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      ComputePlatform: ECS
      
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub
        - '${ProjectName}-green-tg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Port: !FindInMap [ProjectConfig, Settings, ContainerPort]
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
        
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub
        - '${ProjectName}-deployment-group'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnceBlueGreen
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        GreenFleetProvisioningOption:
          Action: DISCOVER_EXISTING
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !GetAtt ECSService.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListener
            TargetGroups:
              - Name: !GetAtt TargetGroup.TargetGroupName
              - Name: !GetAtt GreenTargetGroup.TargetGroupName
                
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS'
        
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub
        - '${ProjectName}-pipeline'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: ECRSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              Configuration:
                RepositoryName: !FindInMap [ProjectConfig, Settings, ProjectName]
                ImageTag: latest
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: SourceOutput
                TaskDefinitionTemplatePath: taskdef.json
                AppSpecTemplateArtifact: SourceOutput
                AppSpecTemplatePath: appspec.yaml
              InputArtifacts:
                - Name: SourceOutput
                
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess'
      Policies:
        - PolicyName: PipelineExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'codedeploy:*'
                  - 'ecr:*'
                  - 'ecs:*'
                  - 'iam:PassRole'
                Resource: '*'

# ==========================================
# OUTPUTS
# ==========================================

Outputs:
  ApplicationURL:
    Description: URL to access the application (after Docker image is pushed)
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationURL'
    
  ECRRepositoryURI:
    Description: ECR Repository URI for Docker images
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-ECRRepositoryURI'
    
  GitHubActionsRoleArn:
    Description: GitHub Actions Role ARN - Add this to repository secrets as AWS_ROLE_TO_ASSUME
    Value: !GetAtt GitHubActionsRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GitHubRoleArn'
    
  DatabaseEndpoint:
    Description: RDS Database endpoint
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DBEndpoint'
    
  S3BucketName:
    Description: S3 bucket for photos
    Value: !Ref PhotoS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
    
  ECSClusterName:
    Description: ECS Cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'
    
  NextSteps:
    Description: What to do after deployment
    Value: !Sub |
      ✅ Infrastructure deployed successfully!
      
      1. Add GitHub Actions secret:
         Repository: https://github.com/${GitHubConfig.Settings.Organization}/${GitHubConfig.Settings.ApplicationRepo}/settings/secrets/actions
         Name: AWS_ROLE_TO_ASSUME
         Value: ${GitHubActionsRole.Arn}
      
      2. Push application code to trigger Docker build and deployment
      
      3. Application URL: http://${ApplicationLoadBalancer.DNSName}
      
      To update infrastructure: Edit this template, commit, and push to GitHub