AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD Pipeline for Photo Upload Application with GitHub OIDC and CodePipeline'

Mappings:
  ProjectConfig:
    Settings:
      ProjectName: 'photo-upload-app'
      Environment: 'production'
      
  GitHubConfig:
    Settings:
      Organization: 'Tabari-Linus'
      ApplicationRepo: 'photo-upload-app'
      InfrastructureRepo: 'ecf-infrastructure-repo'
      Branch: 'main'
      
  DeployConfig:
    Settings:
      DeploymentConfig: 'CodeDeployDefault.ECSAllAtOnceBlueGreen'
      TerminationWaitTime: 5

Resources:
  # ==========================================
  # GitHub OIDC Provider
  # ==========================================
  
  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: 'https://token.actions.githubusercontent.com'
      ClientIdList:
        - 'sts.amazonaws.com'
      ThumbprintList:
        - '6938fd4d98bab03faadb97b34396831e3780aea1'
        - '1c58a3a8518e8759bf075b76b750d4f2df264fcd'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-github-oidc'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
        - Key: ManagedBy
          Value: CloudFormation
          
  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-github-actions-role'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt GitHubOIDCProvider.Arn
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': 'sts.amazonaws.com'
              StringLike:
                'token.actions.githubusercontent.com:sub': !Sub 
                  - 'repo:${Org}/${Repo}:*'
                  - Org: !FindInMap [GitHubConfig, Settings, Organization]
                    Repo: !FindInMap [GitHubConfig, Settings, ApplicationRepo]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
      Policies:
        - PolicyName: ECRPushAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:PutImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-github-actions-role'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # S3 Bucket for Artifacts
  # ==========================================
  
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 
        - '${ProjectName}-artifacts-${AWS::AccountId}-${AWS::Region}'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-artifacts'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # EventBridge Rule for ECR Push
  # ==========================================
  
  ECRPushEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 
        - '${ProjectName}-ecr-push-rule'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Description: 'Trigger CodePipeline on ECR push'
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - ECR Image Action
        detail:
          action-type:
            - PUSH
          repository-name:
            - !FindInMap [ProjectConfig, Settings, ProjectName]
          image-tag:
            - latest
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:pipeline/${CodePipeline}'
          Id: CodePipelineTarget
          RoleArn: !GetAtt EventBridgeRole.Arn
          
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-eventbridge-role'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StartPipeline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:pipeline/${CodePipeline}'
                
  # ==========================================
  # CodeDeploy Application
  # ==========================================
  
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub 
        - '${ProjectName}-app'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      ComputePlatform: ECS
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-codedeploy-app'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
            
  # Green Target Group for Blue/Green Deployment
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 
        - '${ProjectName}-tg-green'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: 'photo-upload-app-main-infrastructure-VPC-ID'
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-tg-green'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub 
        - '${ProjectName}-deployment-group'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: !FindInMap [DeployConfig, Settings, DeploymentConfig]
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: !FindInMap [DeployConfig, Settings, TerminationWaitTime]
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        GreenFleetProvisioningOption:
          Action: DISCOVER_EXISTING
      ECSServices:
        - ClusterName:
            Fn::ImportValue: 'photo-upload-app-ecs-application-Cluster-Name'
          ServiceName:
            Fn::ImportValue: 'photo-upload-app-ecs-application-Service-Name'
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - Fn::ImportValue: 'photo-upload-app-ecs-application-ALB-Listener-Arn'
            TargetGroups:
              - Name:
                  Fn::ImportValue: 'photo-upload-app-ecs-application-TargetGroup-Arn'
              - Name: !Ref GreenTargetGroup
                
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-codedeploy-role'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-codedeploy-role'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # CodePipeline
  # ==========================================
  
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub 
        - '${ProjectName}-pipeline'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: ECRSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              Configuration:
                RepositoryName: !FindInMap [ProjectConfig, Settings, ProjectName]
                ImageTag: latest
              OutputArtifacts:
                - Name: SourceOutput
                
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: SourceOutput
                TaskDefinitionTemplatePath: taskdef.json
                AppSpecTemplateArtifact: SourceOutput
                AppSpecTemplatePath: appspec.yaml
                Image1ArtifactName: SourceOutput
                Image1ContainerName: IMAGE1_NAME
              InputArtifacts:
                - Name: SourceOutput
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-pipeline'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-codepipeline-role'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: PipelineExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:GetBucketVersioning'
                Resource:
                  - !Sub '${ArtifactsBucket.Arn}'
                  - !Sub '${ArtifactsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplication'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:DescribeImages'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ProjectName}'
              - Effect: Allow
                Action:
                  - 'ecs:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
                Condition:
                  StringEquals:
                    'iam:PassedToService':
                      - 'ecs-tasks.amazonaws.com'
                      - 'codedeploy.amazonaws.com'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-codepipeline-role'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]

Outputs:
  GitHubActionsRoleArn:
    Description: ARN of the GitHub Actions IAM role for OIDC
    Value: !GetAtt GitHubActionsRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GitHub-Role-Arn'
      
  CodePipelineName:
    Description: Name of the CodePipeline
    Value: !Ref CodePipeline
    Export:
      Name: !Sub '${AWS::StackName}-Pipeline-Name'
      
  ArtifactsBucketName:
    Description: Name of the artifacts S3 bucket
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-Artifacts-Bucket'
      
  CodeDeployApplicationName:
    Description: CodeDeploy Application Name
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub '${AWS::StackName}-CodeDeploy-App'
      
  InstructionsForGitHub:
    Description: Instructions for setting up GitHub Actions
    Value: !Sub |
      Add the following secret to your GitHub repository:
      Repository: https://github.com/${GitHubConfig.Settings.Organization}/${GitHubConfig.Settings.ApplicationRepo}/settings/secrets/actions
      Secret Name: AWS_ROLE_TO_ASSUME
      Secret Value: ${GitHubActionsRole.Arn}