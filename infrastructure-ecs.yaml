AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate resources for Photo Upload Application with embedded configuration'

Mappings:
  ProjectConfig:
    Settings:
      ProjectName: 'photo-upload-app'
      Environment: 'production'
      StudentName: 'Tabari Linus'
      
  ECSConfig:
    Task:
      Cpu: '512'
      Memory: '1024'
      DesiredCount: 2
      ContainerPort: 8080
      HealthCheckPath: '/health'
      ImageTag: 'latest'
      
  AutoScaling:
    Settings:
      MinCapacity: 2
      MaxCapacity: 10
      TargetCPUUtilization: 70
      ScaleInCooldown: 300
      ScaleOutCooldown: 60

Resources:
  # ==========================================
  # ECR Repository
  # ==========================================
  
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !FindInMap [ProjectConfig, Settings, ProjectName]
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-ecr'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
            
  # ==========================================
  # CloudWatch Log Group
  # ==========================================
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 
        - '/ecs/${ProjectName}'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      RetentionInDays: 30
      
  # ==========================================
  # Application Load Balancer
  # ==========================================
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 
        - '${ProjectName}-alb'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - Fn::ImportValue: 'photo-upload-app-main-infrastructure-PublicSubnetA-ID'
        - Fn::ImportValue: 'photo-upload-app-main-infrastructure-PublicSubnetB-ID'
      SecurityGroups:
        - Fn::ImportValue: 'photo-upload-app-main-infrastructure-ALB-SG-ID'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-alb'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 
        - '${ProjectName}-tg'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Port: !FindInMap [ECSConfig, Task, ContainerPort]
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: 'photo-upload-app-main-infrastructure-VPC-ID'
      HealthCheckEnabled: true
      HealthCheckPath: !FindInMap [ECSConfig, Task, HealthCheckPath]
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: 'lb_cookie'
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-tg'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          
  # ==========================================
  # ECS Cluster
  # ==========================================
  
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 
        - '${ProjectName}-cluster'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-cluster'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # IAM Roles and Policies
  # ==========================================
  
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-task-execution-role'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: SecretAndECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - Fn::ImportValue: 'photo-upload-app-storage-DB-Secret-Arn'
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !GetAtt LogGroup.Arn
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-task-execution-role'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-task-role'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - Fn::ImportValue: 'photo-upload-app-storage-S3-Bucket-Arn'
                  - !Sub 
                    - '${BucketArn}/*'
                    - BucketArn:
                        Fn::ImportValue: 'photo-upload-app-storage-S3-Bucket-Arn'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !GetAtt LogGroup.Arn
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-task-role'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # ECS Task Definition
  # ==========================================
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 
        - '${ProjectName}-task'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !FindInMap [ECSConfig, Task, Cpu]
      Memory: !FindInMap [ECSConfig, Task, Memory]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !FindInMap [ProjectConfig, Settings, ProjectName]
          Image: !Sub 
            - '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}:${Tag}'
            - RepoName: !FindInMap [ProjectConfig, Settings, ProjectName]
              Tag: !FindInMap [ECSConfig, Task, ImageTag]
          PortMappings:
            - ContainerPort: !FindInMap [ECSConfig, Task, ContainerPort]
              Protocol: tcp
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: !FindInMap [ProjectConfig, Settings, Environment]
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - Name: S3_BUCKET_NAME
              Value:
                Fn::ImportValue: 'photo-upload-app-storage-S3-Bucket-Name'
            - Name: STUDENT_NAME
              Value: !FindInMap [ProjectConfig, Settings, StudentName]
            - Name: DB_URL
              Value:
                Fn::ImportValue: 'photo-upload-app-storage-JDBC-URL'
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub
                - '${SecretArn}:username::'
                - SecretArn:
                    Fn::ImportValue: 'photo-upload-app-storage-DB-Secret-Arn'
            - Name: DB_PASSWORD
              ValueFrom: !Sub
                - '${SecretArn}:password::'
                - SecretArn:
                    Fn::ImportValue: 'photo-upload-app-storage-DB-Secret-Arn'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub 
                - 'curl -f http://localhost:${Port}/health || exit 1'
                - Port: !FindInMap [ECSConfig, Task, ContainerPort]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-task-definition'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # ECS Service
  # ==========================================
  
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub 
        - '${ProjectName}-service'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !FindInMap [ECSConfig, Task, DesiredCount]
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: 'photo-upload-app-main-infrastructure-PrivateSubnetA-ID'
            - Fn::ImportValue: 'photo-upload-app-main-infrastructure-PrivateSubnetB-ID'
          SecurityGroups:
            - Fn::ImportValue: 'photo-upload-app-main-infrastructure-ECSTask-SG-ID'
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !FindInMap [ProjectConfig, Settings, ProjectName]
          ContainerPort: !FindInMap [ECSConfig, Task, ContainerPort]
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-service'
            - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
          
  # ==========================================
  # Auto Scaling
  # ==========================================
  
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !FindInMap [AutoScaling, Settings, MaxCapacity]
      MinCapacity: !FindInMap [AutoScaling, Settings, MinCapacity]
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      
  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub 
        - '${ProjectName}-cpu-scaling-policy'
        - ProjectName: !FindInMap [ProjectConfig, Settings, ProjectName]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !FindInMap [AutoScaling, Settings, TargetCPUUtilization]
        ScaleInCooldown: !FindInMap [AutoScaling, Settings, ScaleInCooldown]
        ScaleOutCooldown: !FindInMap [AutoScaling, Settings, ScaleOutCooldown]

Outputs:
  ECRRepositoryUri:
    Description: ECR Repository URI
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-ECR-URI'
      
  ALBEndpoint:
    Description: Application Load Balancer endpoint
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALB-Endpoint'
      
  ALBListenerArn:
    Description: ALB Listener ARN
    Value: !Ref ALBListener
    Export:
      Name: !Sub '${AWS::StackName}-ALB-Listener-Arn'
      
  ECSClusterName:
    Description: ECS Cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-Cluster-Name'
      
  ECSServiceName:
    Description: ECS Service name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub '${AWS::StackName}-Service-Name'
      
  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-TaskDef-Arn'
      
  TargetGroupArn:
    Description: Target Group ARN
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-TargetGroup-Arn'